{"version":3,"sources":["../src/components/copilot-provider/copilot-messages.tsx"],"sourcesContent":["/**\n * An internal context to separate the messages state (which is constantly changing) from the rest of CopilotKit context\n */\n\nimport { ReactNode, useEffect, useState, useRef, useCallback, useMemo } from \"react\";\nimport { CopilotMessagesContext } from \"../../context/copilot-messages-context\";\nimport {\n  loadMessagesFromJsonRepresentation,\n  Message,\n  GraphQLError,\n} from \"@copilotkit/runtime-client-gql\";\nimport { useCopilotContext } from \"../../context/copilot-context\";\nimport { useToast } from \"../toast/toast-provider\";\nimport { shouldShowDevConsole } from \"../../utils/dev-console\";\nimport {\n  ErrorVisibility,\n  CopilotKitApiDiscoveryError,\n  CopilotKitRemoteEndpointDiscoveryError,\n  CopilotKitAgentDiscoveryError,\n  CopilotKitError,\n  CopilotKitErrorCode,\n} from \"@copilotkit/shared\";\n\n// Helper to determine if error should show as banner based on visibility and legacy patterns\nfunction shouldShowAsBanner(gqlError: GraphQLError): boolean {\n  const extensions = gqlError.extensions;\n  if (!extensions) return false;\n\n  // Priority 1: Check error code for discovery errors (these should always be banners)\n  const code = extensions.code as CopilotKitErrorCode;\n  if (\n    code === CopilotKitErrorCode.AGENT_NOT_FOUND ||\n    code === CopilotKitErrorCode.API_NOT_FOUND ||\n    code === CopilotKitErrorCode.REMOTE_ENDPOINT_NOT_FOUND ||\n    code === CopilotKitErrorCode.CONFIGURATION_ERROR ||\n    code === CopilotKitErrorCode.MISSING_PUBLIC_API_KEY_ERROR ||\n    code === CopilotKitErrorCode.UPGRADE_REQUIRED_ERROR\n  ) {\n    return true;\n  }\n\n  // Priority 2: Check banner visibility\n  if (extensions.visibility === ErrorVisibility.BANNER) {\n    return true;\n  }\n\n  // Priority 3: Check for critical errors that should be banners regardless of formal classification\n  const errorMessage = gqlError.message.toLowerCase();\n  if (\n    errorMessage.includes(\"api key\") ||\n    errorMessage.includes(\"401\") ||\n    errorMessage.includes(\"unauthorized\") ||\n    errorMessage.includes(\"authentication\") ||\n    errorMessage.includes(\"incorrect api key\")\n  ) {\n    return true;\n  }\n\n  // Priority 4: Legacy stack trace detection for discovery errors\n  const originalError = extensions.originalError as any;\n  if (originalError?.stack) {\n    return (\n      originalError.stack.includes(\"CopilotApiDiscoveryError\") ||\n      originalError.stack.includes(\"CopilotKitRemoteEndpointDiscoveryError\") ||\n      originalError.stack.includes(\"CopilotKitAgentDiscoveryError\")\n    );\n  }\n\n  return false;\n}\n\nexport function CopilotMessages({ children }: { children: ReactNode }) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const lastLoadedThreadId = useRef<string>();\n  const lastLoadedAgentName = useRef<string>();\n  const lastLoadedMessages = useRef<string>();\n\n  const { threadId, agentSession, runtimeClient, showDevConsole, onError, copilotApiConfig } =\n    useCopilotContext();\n  const { setBannerError } = useToast();\n\n  // Helper function to trace UI errors (similar to useCopilotRuntimeClient)\n  const traceUIError = useCallback(\n    async (error: CopilotKitError, originalError?: any) => {\n      // Just check if onError and publicApiKey are defined\n      if (!onError || !copilotApiConfig.publicApiKey) return;\n\n      try {\n        const traceEvent = {\n          type: \"error\" as const,\n          timestamp: Date.now(),\n          context: {\n            source: \"ui\" as const,\n            request: {\n              operation: \"loadAgentState\",\n              url: copilotApiConfig.chatApiEndpoint,\n              startTime: Date.now(),\n            },\n            technical: {\n              environment: \"browser\",\n              userAgent: typeof navigator !== \"undefined\" ? navigator.userAgent : undefined,\n              stackTrace: originalError instanceof Error ? originalError.stack : undefined,\n            },\n          },\n          error,\n        };\n        await onError(traceEvent);\n      } catch (traceError) {\n        console.error(\"Error in CopilotMessages onError handler:\", traceError);\n      }\n    },\n    [onError, copilotApiConfig.publicApiKey, copilotApiConfig.chatApiEndpoint],\n  );\n\n  const createStructuredError = (gqlError: GraphQLError): CopilotKitError | null => {\n    const extensions = gqlError.extensions;\n    const originalError = extensions?.originalError as any;\n\n    // Priority: Check stack trace for discovery errors first\n    if (originalError?.stack) {\n      if (originalError.stack.includes(\"CopilotApiDiscoveryError\")) {\n        return new CopilotKitApiDiscoveryError({ message: originalError.message });\n      }\n      if (originalError.stack.includes(\"CopilotKitRemoteEndpointDiscoveryError\")) {\n        return new CopilotKitRemoteEndpointDiscoveryError({ message: originalError.message });\n      }\n      if (originalError.stack.includes(\"CopilotKitAgentDiscoveryError\")) {\n        return new CopilotKitAgentDiscoveryError({\n          agentName: \"\",\n          availableAgents: [],\n        });\n      }\n    }\n\n    // Fallback: Use the formal error code if available\n    const message = originalError?.message || gqlError.message;\n    const code = extensions?.code as CopilotKitErrorCode;\n\n    if (code) {\n      return new CopilotKitError({ message, code });\n    }\n\n    return null;\n  };\n\n  const handleGraphQLErrors = useCallback(\n    (error: any) => {\n      if (error.graphQLErrors?.length) {\n        const graphQLErrors = error.graphQLErrors as GraphQLError[];\n\n        // Route all errors to banners for consistent UI\n        const routeError = (gqlError: GraphQLError) => {\n          const extensions = gqlError.extensions;\n          const visibility = extensions?.visibility as ErrorVisibility;\n          const isDev = shouldShowDevConsole(showDevConsole);\n\n          if (!isDev) {\n            console.error(\"CopilotKit Error (hidden in production):\", gqlError.message);\n            return;\n          }\n\n          // Silent errors - just log\n          if (visibility === ErrorVisibility.SILENT) {\n            console.error(\"CopilotKit Silent Error:\", gqlError.message);\n            return;\n          }\n\n          // All other errors (including DEV_ONLY) show as banners for consistency\n          const ckError = createStructuredError(gqlError);\n          if (ckError) {\n            setBannerError(ckError);\n            // Trace the structured error\n            traceUIError(ckError, gqlError);\n          } else {\n            // Fallback: create a generic error for unstructured GraphQL errors\n            const fallbackError = new CopilotKitError({\n              message: gqlError.message,\n              code: CopilotKitErrorCode.UNKNOWN,\n            });\n            setBannerError(fallbackError);\n            // Trace the fallback error\n            traceUIError(fallbackError, gqlError);\n          }\n        };\n\n        // Process all errors as banners\n        graphQLErrors.forEach(routeError);\n      } else {\n        const isDev = shouldShowDevConsole(showDevConsole);\n        if (!isDev) {\n          console.error(\"CopilotKit Error (hidden in production):\", error);\n        } else {\n          // Route non-GraphQL errors to banner as well\n          const fallbackError = new CopilotKitError({\n            message: error?.message || String(error),\n            code: CopilotKitErrorCode.UNKNOWN,\n          });\n          setBannerError(fallbackError);\n          // Trace the non-GraphQL error\n          traceUIError(fallbackError, error);\n        }\n      }\n    },\n    [setBannerError, showDevConsole, traceUIError],\n  );\n\n  useEffect(() => {\n    if (!threadId || threadId === lastLoadedThreadId.current) return;\n    if (\n      threadId === lastLoadedThreadId.current &&\n      agentSession?.agentName === lastLoadedAgentName.current\n    ) {\n      return;\n    }\n\n    const fetchMessages = async () => {\n      if (!agentSession?.agentName) return;\n\n      const result = await runtimeClient.loadAgentState({\n        threadId,\n        agentName: agentSession?.agentName,\n      });\n\n      // Check for GraphQL errors and manually trigger error handling\n      if (result.error) {\n        // Update refs to prevent infinite retries of the same failed request\n        lastLoadedThreadId.current = threadId;\n        lastLoadedAgentName.current = agentSession?.agentName;\n        handleGraphQLErrors(result.error);\n        return; // Don't try to process the data if there's an error\n      }\n\n      const newMessages = result.data?.loadAgentState?.messages;\n      if (newMessages === lastLoadedMessages.current) return;\n\n      if (result.data?.loadAgentState?.threadExists) {\n        lastLoadedMessages.current = newMessages;\n        lastLoadedThreadId.current = threadId;\n        lastLoadedAgentName.current = agentSession?.agentName;\n\n        const messages = loadMessagesFromJsonRepresentation(JSON.parse(newMessages || \"[]\"));\n        setMessages(messages);\n      }\n    };\n    void fetchMessages();\n  }, [threadId, agentSession?.agentName]);\n\n  const memoizedChildren = useMemo(() => children, [children]);\n\n  return (\n    <CopilotMessagesContext.Provider\n      value={{\n        messages,\n        setMessages,\n      }}\n    >\n      {memoizedChildren}\n    </CopilotMessagesContext.Provider>\n  );\n}\n"],"mappings":"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","names":["messages"]}