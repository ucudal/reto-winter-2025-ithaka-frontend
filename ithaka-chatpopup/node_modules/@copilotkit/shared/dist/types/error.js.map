{"version":3,"sources":["../../src/types/error.ts"],"sourcesContent":["export interface CopilotErrorEvent {\n  type: \"error\" | \"request\" | \"response\" | \"agent_state\" | \"action\" | \"message\" | \"performance\";\n  timestamp: number;\n  context: CopilotRequestContext;\n  error?: any; // Present when type is 'error'\n}\n\nexport interface CopilotRequestContext {\n  // Basic identifiers\n  threadId?: string;\n  runId?: string;\n  source: \"runtime\" | \"ui\" | \"agent\" | \"network\";\n\n  // Request details\n  request?: {\n    operation: string;\n    method?: string;\n    url?: string;\n    path?: string;\n    headers?: Record<string, string>;\n    body?: any;\n    startTime: number;\n  };\n\n  // Response details\n  response?: {\n    status?: number;\n    statusText?: string;\n    headers?: Record<string, string>;\n    body?: any;\n    endTime: number;\n    latency: number;\n  };\n\n  // Agent context\n  agent?: {\n    name?: string;\n    nodeName?: string;\n    state?: any;\n  };\n\n  // Message flow context\n  messages?: {\n    input?: any[];\n    output?: any[];\n    messageCount?: number;\n  };\n\n  // Technical context\n  technical?: {\n    userAgent?: string;\n    host?: string;\n    environment?: string;\n    version?: string;\n    stackTrace?: string;\n  };\n\n  // Performance metrics\n  performance?: {\n    requestDuration?: number;\n    streamingDuration?: number;\n    actionExecutionTime?: number;\n    memoryUsage?: number;\n  };\n\n  // Extensible metadata\n  metadata?: Record<string, any>;\n}\n\nexport type CopilotErrorHandler = (errorEvent: CopilotErrorEvent) => void | Promise<void>;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}