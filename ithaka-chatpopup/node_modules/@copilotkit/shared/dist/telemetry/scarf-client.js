"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/telemetry/scarf-client.ts
var scarf_client_exports = {};
__export(scarf_client_exports, {
  default: () => scarf_client_default
});
module.exports = __toCommonJS(scarf_client_exports);

// package.json
var version = "1.9.3";

// src/telemetry/scarf-client.ts
var SCARF_BASE_URL = `https://copilotkit.gateway.scarf.sh/${version}`;
var ScarfClient = class {
  constructor() {
  }
  async logEvent(properties) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 3e3);
      const queryParams = new URLSearchParams();
      Object.entries(properties).forEach(([key, value]) => {
        if (value !== null && value !== void 0) {
          queryParams.append(key, String(value));
        }
      });
      const url = `${SCARF_BASE_URL}?${queryParams.toString()}`;
      const response = await fetch(url, {
        method: "GET",
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch {
    }
  }
};
var scarf_client_default = new ScarfClient();
//# sourceMappingURL=scarf-client.js.map