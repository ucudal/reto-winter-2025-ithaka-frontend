{"version":3,"sources":["../src/graphql/@generated/gql.ts"],"sourcesContent":["/* eslint-disable */\nimport * as types from './graphql';\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n */\nconst documents = {\n    \"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      extensions {\\n        openaiAssistantAPI {\\n          runId\\n          threadId\\n        }\\n      }\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n          parentMessageId\\n        }\\n        ... on ImageMessageOutput {\\n          format\\n          bytes\\n          role\\n          parentMessageId\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          arguments @stream\\n          parentMessageId\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n      metaEvents @stream {\\n        ... on LangGraphInterruptEvent {\\n          type\\n          name\\n          value\\n        }\\n\\n        ... on CopilotKitLangGraphInterruptEvent {\\n          type\\n          name\\n          data {\\n            messages {\\n              __typename\\n              ... on BaseMessageOutput {\\n                id\\n                createdAt\\n              }\\n              ... on BaseMessageOutput @defer {\\n                status {\\n                  ... on SuccessMessageStatus {\\n                    code\\n                  }\\n                  ... on FailedMessageStatus {\\n                    code\\n                    reason\\n                  }\\n                  ... on PendingMessageStatus {\\n                    code\\n                  }\\n                }\\n              }\\n              ... on TextMessageOutput {\\n                content\\n                role\\n                parentMessageId\\n              }\\n              ... on ActionExecutionMessageOutput {\\n                name\\n                arguments\\n                parentMessageId\\n              }\\n              ... on ResultMessageOutput {\\n                result\\n                actionExecutionId\\n                actionName\\n              }\\n            }\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\": types.GenerateCopilotResponseDocument,\n    \"\\n  query availableAgents {\\n    availableAgents {\\n      agents {\\n        name\\n        id\\n        description\\n      }\\n    }\\n  }\\n\": types.AvailableAgentsDocument,\n    \"\\n  query loadAgentState($data: LoadAgentStateInput!) {\\n    loadAgentState(data: $data) {\\n      threadId\\n      threadExists\\n      state\\n      messages\\n    }\\n  }\\n\": types.LoadAgentStateDocument,\n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n *\n *\n * @example\n * ```ts\n * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);\n * ```\n *\n * The query argument is unknown!\n * Please regenerate the types.\n */\nexport function graphql(source: string): unknown;\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      extensions {\\n        openaiAssistantAPI {\\n          runId\\n          threadId\\n        }\\n      }\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n          parentMessageId\\n        }\\n        ... on ImageMessageOutput {\\n          format\\n          bytes\\n          role\\n          parentMessageId\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          arguments @stream\\n          parentMessageId\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n      metaEvents @stream {\\n        ... on LangGraphInterruptEvent {\\n          type\\n          name\\n          value\\n        }\\n\\n        ... on CopilotKitLangGraphInterruptEvent {\\n          type\\n          name\\n          data {\\n            messages {\\n              __typename\\n              ... on BaseMessageOutput {\\n                id\\n                createdAt\\n              }\\n              ... on BaseMessageOutput @defer {\\n                status {\\n                  ... on SuccessMessageStatus {\\n                    code\\n                  }\\n                  ... on FailedMessageStatus {\\n                    code\\n                    reason\\n                  }\\n                  ... on PendingMessageStatus {\\n                    code\\n                  }\\n                }\\n              }\\n              ... on TextMessageOutput {\\n                content\\n                role\\n                parentMessageId\\n              }\\n              ... on ActionExecutionMessageOutput {\\n                name\\n                arguments\\n                parentMessageId\\n              }\\n              ... on ResultMessageOutput {\\n                result\\n                actionExecutionId\\n                actionName\\n              }\\n            }\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      extensions {\\n        openaiAssistantAPI {\\n          runId\\n          threadId\\n        }\\n      }\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n          parentMessageId\\n        }\\n        ... on ImageMessageOutput {\\n          format\\n          bytes\\n          role\\n          parentMessageId\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          arguments @stream\\n          parentMessageId\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n      metaEvents @stream {\\n        ... on LangGraphInterruptEvent {\\n          type\\n          name\\n          value\\n        }\\n\\n        ... on CopilotKitLangGraphInterruptEvent {\\n          type\\n          name\\n          data {\\n            messages {\\n              __typename\\n              ... on BaseMessageOutput {\\n                id\\n                createdAt\\n              }\\n              ... on BaseMessageOutput @defer {\\n                status {\\n                  ... on SuccessMessageStatus {\\n                    code\\n                  }\\n                  ... on FailedMessageStatus {\\n                    code\\n                    reason\\n                  }\\n                  ... on PendingMessageStatus {\\n                    code\\n                  }\\n                }\\n              }\\n              ... on TextMessageOutput {\\n                content\\n                role\\n                parentMessageId\\n              }\\n              ... on ActionExecutionMessageOutput {\\n                name\\n                arguments\\n                parentMessageId\\n              }\\n              ... on ResultMessageOutput {\\n                result\\n                actionExecutionId\\n                actionName\\n              }\\n            }\\n            value\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  query availableAgents {\\n    availableAgents {\\n      agents {\\n        name\\n        id\\n        description\\n      }\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query availableAgents {\\n    availableAgents {\\n      agents {\\n        name\\n        id\\n        description\\n      }\\n    }\\n  }\\n\"];\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  query loadAgentState($data: LoadAgentStateInput!) {\\n    loadAgentState(data: $data) {\\n      threadId\\n      threadExists\\n      state\\n      messages\\n    }\\n  }\\n\"): (typeof documents)[\"\\n  query loadAgentState($data: LoadAgentStateInput!) {\\n    loadAgentState(data: $data) {\\n      threadId\\n      threadExists\\n      state\\n      messages\\n    }\\n  }\\n\"];\n\nexport function graphql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n\nexport type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;"],"mappings":";;;;;;;AAcA,IAAM,YAAY;AAAA,EACd,m/FAAy/F;AAAA,EACz/F,4IAAkJ;AAAA,EAClJ,6KAAmL;AACvL;AA6BO,SAAS,QAAQ,QAAgB;AACtC,SAAQ,UAAkB,MAAM,KAAK,CAAC;AACxC;","names":[]}